package org.malware.detect.module;

import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;

public class MD5 {
	public static String checkfor(FileInputStream fis){
		MessageDigest md = null;
		/*Calculate the MD5 value*/
		try {
			md = MessageDigest.getInstance("MD5");
		} catch (NoSuchAlgorithmException e1) {
			e1.printStackTrace();
		}
		byte[] dataBytes = new byte[1024];
	 
		int nread = 0;
		try {
			while ((nread = (fis).read(dataBytes)) != -1) {
			md.update(dataBytes, 0, nread);
		}
		} catch (IOException e) {
			e.printStackTrace();
		};
	 
		/*Append the MD5 code to String*/
		byte[] mdbytes = md.digest();
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < mdbytes.length; i++) {
			sb.append(Integer.toString((mdbytes[i] & 0xff) + 0x100, 16).substring(1));
		}
		
		/*Judge if there is a match*/
		int flag=0;
		String mdis=sb.toString();
		System.out.print("Digest(in hex format):: " + mdis);
		
		//Get value from DB:
		Connection conn=null;
		try{
			conn=new ConnectDB().getConnection();
			if(conn==null){
				System.out.println("cannot connect to remote DB");
				return null;
			}
			
			PreparedStatement ps = 
			conn.prepareStatement("select MalwareName from md5table where MD5 = '"+mdis+"' LIMIT 1");
			
			ResultSet rs = ps.executeQuery();
			if(rs.next()){
				String malware = rs.getString(1);
				if(malware!=null){
					System.out.println("\nVirus detected :"+malware);
					return ("Virus detected :"+malware);
				}
					
			}else{
				System.out.println("\nNo Virus detected");
				return ("No Virus detected");
			}
		}catch( Exception ex){
			ex.printStackTrace();
		}finally{
			try {
				if(conn!=null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return null;
	}
	 
    public static void main(String[] args) throws NoSuchAlgorithmException {
    	System.out.println("input a url with full address e.g http://dldir1.qq.com/qqfile/qq/QQ7.0/14275/QQ7.0.exe ");
    	Scanner input=new Scanner(System.in);
    	String in_url=input.nextLine();
    	
    	long startTime = System.currentTimeMillis();
    	
    	//String file=DownloadHandler.download(in_url);
    	FileInputStream fis=MD5.fileFetcher("C:\\Users\\Pengcheng\\Downloads\\12.apk");
		checkfor(fis);  
		
		long estimatedTime = System.currentTimeMillis() - startTime;
		System.out.println(estimatedTime/1000+"s taken to detect the virus!");
    }
    
    public static FileInputStream fileFetcher(String file){ 
        FileInputStream fis = null;
		try {
			fis = new FileInputStream(file);
		} catch (FileNotFoundException e){
			e.printStackTrace();
		}
		return fis;
	}
}


